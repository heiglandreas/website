<?php 
/**
 * Website Zend\Together
 *
 * @package    Application
 * @author     Ralf Eggert <r.eggert@travello.de>
 * * @link       http://www.zf-together.com
 */

/**
 * Listing 22.2 view script
 * 
 * @package    Application
 */

$this->headTitle('Listing 22.2');
$this->pageTitle('Listing 22.2');
?>
<h3><code>BasketEntity</code> stellt Warenkorbdaten bereit</h3>
<pre>
&lt;?php
namespace Shop\Entity;

class BasketEntity implements BasketEntityInterface
{
    const VAT = 0.07;
    
    protected $positions = array();
    
    public function setPositions(array $positions)
    {
        $this->positions = $positions;
    }
    
    public function getPositions()
    {
        return $this->positions;
    }
    
    public function getPosition($key)
    {
        if (!isset($this->positions[$key])) {
            return false;
        }
        
        return $this->positions[$key];
    }
    
    public function addPosition(PositionEntity $position)
    {
        if (isset($this->positions[$position->getId()])) {
            $actualPosition = $this->positions[$position->getId()];
            $actualPosition->addQuantity($position->getQuantity());
        } else {
            $this->positions[$position->getId()] = $position;
        }
    }
    
    public function removePosition(PositionEntity $position)
    {
        if (!isset($this->positions[$position->getId()])) {
            return false;
        }
        
        unset($this->positions[$position->getId()]);
    }
    
    public function getTotal()
    {
        $total = 0;
        
        foreach ($this->getPositions() as $position) {
            $total += $position->getAmount();
        }
        
        return $total;
    }
    
    public function getCount()
    {
        $count = 0;
        
        foreach ($this->getPositions() as $position) {
            $count += $position->getQuantity();
        }
        
        return $count;
    }
    
    public function getVat()
    {
        $total = $this->getTotal();
        
        return $total - $total / (1 + self::VAT);
    }
    
    public function isEmpty()
    {
        return $this->getCount() == 0 ? true : false;
    }
}
</pre>
